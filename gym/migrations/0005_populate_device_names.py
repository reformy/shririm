# Generated by Django 4.2.23 on 2025-06-14 12:23

from django.db import migrations


def populate_plan_device_names(apps, schema_editor):
    """
    Populate the name field for existing PlanDevice records
    using the device name and ensuring uniqueness within a plan.
    """
    PlanDevice = apps.get_model('gym', 'PlanDevice')
    
    # Group PlanDevice objects by plan to check for name uniqueness within each plan
    plan_devices_by_plan = {}
    for plan_device in PlanDevice.objects.all():
        if plan_device.plan_id not in plan_devices_by_plan:
            plan_devices_by_plan[plan_device.plan_id] = []
        plan_devices_by_plan[plan_device.plan_id].append(plan_device)
    
    # Process each plan's devices
    for plan_id, devices in plan_devices_by_plan.items():
        used_names = set()
        for plan_device in devices:
            if not plan_device.name:
                base_name = plan_device.device.name
                name = base_name
                suffix = 1
                
                # Ensure the name is unique within this plan
                while name in used_names:
                    name = f"{base_name} #{suffix}"
                    suffix += 1
                    
                plan_device.name = name
                used_names.add(name)
                plan_device.save()


def populate_device_session_names(apps, schema_editor):
    """
    Populate the name field for existing DeviceSession records
    from the related plan_device name or device name.
    """
    DeviceSession = apps.get_model('gym', 'DeviceSession')
    
    for device_session in DeviceSession.objects.all():
        if not device_session.name:
            # Try to get name from plan_device first
            if device_session.plan_device and device_session.plan_device.name:
                device_session.name = device_session.plan_device.name
            # Fallback to device name
            else:
                device_session.name = device_session.device.name
                
            device_session.save()


class Migration(migrations.Migration):

    dependencies = [
        ('gym', '0004_devicesession_name_plandevice_name_and_more'),
    ]

    operations = [
        migrations.RunPython(populate_plan_device_names),
        migrations.RunPython(populate_device_session_names),
    ]
